#해시(hash)란?
- 해시는 key-value 쌍으로 이루어져 있는 구조
- 파이썬에서는 딕셔너리를 이용하여 해시를 구현한다.
- 배열은 [] 튜플은 (), 딕셔너리는 {}

#파이썬 튜플 사용
- ex ) 선언
    value  = {
        'color' : 'green',
        'name' : 'smyoo'
    }
    또는
    value = {}
- value[color] = red -> color라는 키 값에 red 라는 value 할당
- value.keys() -> 키를 전부 리스트 형태로 호출
- value.values() -> 값을 전부 리스트 형태로 호출
- value.has_key('name') -> name에 대한 키를 가지고 있는가?
- value.items() -> 딕셔너리에 저장된 데이터를 리스트 형태로 변환
- value.update(temp) -> temp라는 딕셔너리를 value라는 딕셔너리에 반영
- value.pop() -> 딕셔너리에서 해당 key 정보를 추출

#힙(heap)이란?
- 완전 이진 트리의 일종, 우선 순위 큐를 위하여 또는 '최댓값과 최솟값을 빠르게 찾기 위해' 고안된 자료구조
- 즉 최대 / 최소값 찾을때 시간측면 효율성이 높을 것 같다.
- '우선 순위 큐'? 우선 순위의 개념을 높은 데이터가 먼저나가는 큐 형태의 자료구조
이용사례 ) a. 시뮬레이션 시스템, b. 운영 체제에서의 작업 스케줄링, c.네트워크 트레픽 제어
- 힙은 최대힙, 최소힙 2가지로 이루어져있다.

1. 최대힙
- 가장 큰 값이 루트
- 부모노드의 키값이 자식노드의 키값보다 크거나 같다
- key(부모노드) >= key(자식노드)
2. 최소힙
- 가장 작은 값이 루트
- 부모노드의 키값이 자식노드의 키값보다 작다
- key(부모노드) < key(자식노드)

- 삽입 연산 ->
    1.마지막 원소에 삽입
    2.조건에 만족하는가? 만족하면 종료 아니면 key값과 switch 반복
- 삭제 연산 ->
    1. 루트 노트를 삭제
    2. 트리의 레벨 순서중 가장 마지막 노드를 루트로 옮긴다.
    3. 루트로 옮겨진 노드의 두 자식노드중 더 큰값을 가진 노드와 비교
    4. 만족하는가? 종료 아니면 루트와 자식 변경 반복

- 노드 번호 m을 기준으로
왼쪽 자식 노드 2m
오른쪽 자식 노드 2m+1
부모노드 m//2

- 파이썬에서는 heapq(힙큐) 내장 모듈을 사용하여 구현한다 . 기준은 최소힙

#파이썬 heapq 사용
노드 추가
import heapq
heap = []
heapq.heappush(heap, 1)

노드 삭제
heapq.heappop(heap)

리스트를 힙으로 바꾸기
heapq.heapify(list객체)


#최대힙 구하기
import heapq

nums = [4, 1, 7, 3, 8, 5]
heap = []

for num in nums:
  heapq.heappush(heap, (-num, num))  # (우선 순위, 값)

while heap:
  print(heapq.heappop(heap)[1])  # index 1