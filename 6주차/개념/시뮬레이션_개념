시뮬레이션 ( simulation )
일련의 명령에 따라서 개체를 차례대로 이동시키는 것

- 일반적으로 2차원 공간을 다루는 문제가 많이 나온다.
- 2차원일때는 행렬 개념 사용
- 2차원 공간은 방향 벡터가 자주 나옴

상하좌우 - 답안 예시
n = int(input())
x, y = 1, 1
plans = input().split()

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]
direction = ['L', 'R', 'U', 'D']

for plan in plans:
	for i in range(len(direction)):
		nx = x + dx[i]
		ny = y + dy[i]
	if nx < 1 or ny < 1 or nx > n or ny > n:
		continue
	x, y = nx, ny

print(x, y)

시각 - 답안예시
N = int(input())

count = 0
for h in range(N + 1):
	for m in range(60):
		for s in range(60):
			if '3' in str(h) + str(m) + str(s):
				count += 1

print(count)

왕실의 나이트 - 답안 예
inputdata = input()
inputrow = int(inputdata[1])
inputcol = ord(inputdata[0]) - ord('a') + 1

directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]

count = 0
for dir in directions:
	newrow = inputrow + dir[1]
	newcol = inputcol + dir[0]
	if 1 <= newrow <= 8 and 1 <= newcol <= 8:
		count += 1

print(count)

문자열 재정렬 - 예시
data = input()
string = []
number = 0

for char in data:
	if char.isalpha():
		string.append(char)
	else:
		number += int(char)
string.sort()

if number != 0:
	string.append(str(number))
	# str형으로 안 바꾸면 아래 join을 쓸 수 없다
print(''.join(string))
# ''을 띄어쓰기 기준으로 리스트 내 원소들을 잇는다

참고 -https://velog.io/@jehjong/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B5%AC%ED%98%84Implementation-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%99%84%EC%A0%84-%ED%83%90%EC%83%89
